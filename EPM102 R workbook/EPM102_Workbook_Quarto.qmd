---
title: "EPM102 workbook"
author: "Shamsudeen Mohammed"
format: 
  html:
      theme: cosmo
      toc: true
      toc-location: left
      number-sections: true
      code-fold: show
      code-tools: true
      smooth-scroll: true
      toc-expand: 2
freeze: auto
execute:
  echo: true
  warning: false
  message: false
---

# Practical WB02: Using R for data summary and presentation

## **Introduction**

In this practical, we will use R to summarise and present the data discussed in CAL session SC02.

Packages required for WB02

```{r}
library(rio)
library(tidyverse)
```

Import the babies dataset.

```{r}
babies <- import("babies.csv")
```

## Graphical displays

We will use bar charts to display the distributions of categorical variables and histograms to display the distributions of quantitative variables.

### Creating a bar chart

We wish to create a bar chart for the hypertension variable. In this practical, we will use plotting commands from base R. A very flexible alternative is using the library ‘ggplot2’.

First, count how many times each category of hyp appears in the dataset and store the result in an object called counts

```{r}
counts <- table(babies$hyp)
counts
```

Use the barplot() function to draw the bar chart

```{r}
#| fig-cap: "Bar chart of hypertension, counts"

barplot(counts)
```

To save the plot as an image file you can use the png() command as below. This puts the output of the barplot() command into a png file named ‘practical2-plot1.png’. The png file is saved to your working directory.

```{r}
#| eval: false

png("practical2-plot1.png")
barplot(counts)
dev.off()
```

There are several ways to improve the bar chart. For example, we can add axis labels and colour the bars.

```{r}
#| fig-cap: "Improved bar chart with labels and colors"

barplot(
  counts,
  col = c("red", "blue"),
  xlab = "Hypertension",
  ylab = "Frequency"
)
```

We may also want to generate a plot of the percentage of observations in each category of hypertension.

```{r}
#| label: barplot-percent
#| fig-cap: "Bar chart of hypertension, percentages"

percent <- counts * 100 / sum(counts)

barplot(
  percent,
  col = c("red", "blue"),
  xlab = "Hypertension",
  ylab = "Percentage"
)
```

### Creating a Histogram

To obtain a histogram for a quantitative variable, use the hist() command. Try this for birthweight.

```{r}
#| label: hist-basic
#| fig-cap: "Histogram of birthweight"

hist(babies$bweight)
```

Again, there is room for improvement in this histogram. We use the breaks argument to specify the number of bars in our chart. We can also set the axis labels with xlab, like we did for our barplot.

```{r}
#| label: hist-improved
#| fig-cap: "Improved histogram of birthweight with 5 breaks"

hist(
  babies$bweight,
  breaks = 5,
  xlab = "Birthweight (g)"
)
```

hist() defaults to showing the frequency of observations in each interval. If we want to look at the probability density of observations in each bar (so the area of each bar relates to the number of observations), we can set the argument freq=FALSE.

```{r}
#| label: hist-density
#| fig-cap: "Histogram of birthweight with probability density"

hist(
  babies$bweight,
  breaks = 5,
  xlab = "Birthweight (g)",
  freq = FALSE
)
```

In this plot, the area of the bars reflects the number of observations in them. You can vary the number of bars in the histogram by adding, for example, breaks = 12.

```{r}
#| label: hist-12-breaks
#| fig-cap: "Histogram of birthweight with 12 breaks"

hist(
  babies$bweight,
  breaks = 12,
  xlab = "Birthweight (g)",
  freq = FALSE
)
```

You will notice that there are actually only 9 bars in the plot although we asked for 12 breaks. This is because when you specify a single number for breaks, the hist() function treats it as a suggestion. To control the number of bars more precisely you need to set a sequence of values for the breaks. We can make a sequence from the minimum bweight to maximum using seq(from=min(babies𝑏𝑤𝑒𝑖𝑔ℎ𝑡), 𝑡𝑜 = 𝑚𝑎𝑥(𝑏𝑎𝑏𝑖𝑒𝑠bweight), length.out=13) (Note, if there are 13 breaks there are 12 bars).

```{r}
#| label: hist-precise-breaks
#| fig-cap: "Histogram of birthweight with precise breaks"

hist(
  babies$bweight,
  breaks = seq(
    from = min(babies$bweight),
    to = max(babies$bweight),
    length.out = 13
  ),
  xlab = "Birthweight (g)",
  freq = FALSE
)
```

We can superimpose a normal curve on the plot using the curve() function.

```{r}
#| label: hist-normal-curve
#| fig-cap: "Histogram of birthweight with normal curve"

hist(
  babies$bweight,
  breaks = seq(
    from = min(babies$bweight),
    to = max(babies$bweight),
    length.out = 13
  ),
  xlab = "Birthweight (g)",
  freq = FALSE
)
curve(
  dnorm(
    x,
    mean = mean(babies$bweight),
    sd = sd(babies$bweight)
  ),
  add = TRUE
)
```

::: {.callout-note appearance="minimal"}
## dnorm() creates a normal curve for a chosen mean and standard deviation. Using add = TRUE in curve() overlays this curve on the histogram instead of opening a new plot.
:::

For a histogram of continuous quantitative data that are recorded as discrete quantities (e.g. maternal age), we may want to specify the bin width as 1. To do this, we can use another sequence from minimum to maximum maternal age: seq(from=min(babies𝑚𝑎𝑡𝑎𝑔𝑒), 𝑡𝑜 = 𝑚𝑎𝑥(𝑏𝑎𝑏𝑖𝑒𝑠matage), by=1).

```{r}
#| label: hist-matage
#| fig-cap: "Histogram of maternal age"

hist(
  babies$matage,
  breaks = seq(
    from = min(babies$matage),
    to = max(babies$matage),
    by = 1
  ),
  xlab = "Maternal age (years)"
)
```

::: callout-note
## Notice the height of each bar now represents the frequency and not the density or the proportion in each group.
:::

To produce plots of cumulative distributions for quantitative data, you can use the ecdf() function, which calculates the Empirical Cumulative Distribution Function.

```{r}
#| label: ecdf-bweight
#| fig-cap: "Empirical Cumulative Distribution Function of birthweight"

plot(
  ecdf(babies$bweight),
  do.points = FALSE,
  verticals = TRUE
)
```

There are two arguments specified in plot() that change how the ECDF is displayed. What happens if you change them from TRUE to FALSE or vice versa? The smallest value for bweight is 630g (we can obtain this using the command min(babies\$bweight)). We can see the value of the ECDF curve using this code.

```{r}
#| label: ecdf-value. 

ecdf(babies$bweight)(630)
```

::: {.callout-note appearance="simple"}
## We see that for bweight=630, the value of the ECDF curve is 0.0015601 (that is 1/641, the number of babies in the dataset). You may wish to look at a few other values in this way.
:::

To display a scatterplot of the relationship of two continuous variables, we simply enter both variables in the plot() command. Try this with birthweight and maternal age.

```{r}
#| label: scatterplot. 
#| fig-cap: "Scatterplot of birthweight vs. maternal age"
#| fig-alt: "The scatter plot is used to help assess whether there appears to be an association between two quantitative variables, here birthweight and maternal age. This subject is discussed in greater detail in SC14 & SC15, and in the associated practical WB14/15."

plot(
  babies$matage,
  babies$bweight,
  xlab = "Maternal age (years)",
  ylab = "Birthweight (g)"
)
```

::: callout-note
## The scatter plot is used to help assess whether there appears to be an association between two quantitative variables, here birthweight and maternal age. This subject is discussed in greater detail in SC14 & SC15, and in the associated practical WB14/15.
:::

# Practical WB05: Inference from a sample mean

In this session, you are going to use the Babies data to illustrate the material presented in the CAL session SE05.

Packages required for WB02

```{r}
library(rio) 
library(tidyverse)
```

Import the babies dataset

```{r}
babies<-import("babies.csv")
```

Exploring data using the summarise function
